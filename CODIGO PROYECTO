import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

// Interfaz Alquilable (Ejemplo de Polimorfismo)
interface Alquilable {
    void iniciarAlquiler();
    void finalizarAlquiler();
    float calcularCosto();
}

// Clase Cliente
class Cliente {
    private int idCliente;
    private String nombre;
    private String telefono;
    private String correo;

    public Cliente(int idCliente, String nombre, String telefono, String correo) {
        this.idCliente = idCliente;
        this.nombre = nombre;
        this.telefono = telefono;
        this.correo = correo;
    }

    public void registrarCliente() {
        System.out.println("Cliente registrado: " + nombre);
    }

    @Override
    public String toString() {
        return nombre + " (ID: " + idCliente + ")";
    }
}

// Enum EstadoBicicleta
enum EstadoBicicleta {
    DISPONIBLE, ALQUILADA, MANTENIMIENTO
}

// Clase Bicicleta
class Bicicleta {
    private int idBicicleta;
    private String marca;
    private String modelo;
    private EstadoBicicleta estado;

    public Bicicleta(int idBicicleta, String marca, String modelo) {
        this.idBicicleta = idBicicleta;
        this.marca = marca;
        this.modelo = modelo;
        this.estado = EstadoBicicleta.DISPONIBLE;
    }

    public void cambiarEstado(EstadoBicicleta nuevoEstado) {
        this.estado = nuevoEstado;
    }

    public EstadoBicicleta verificarEstado() {
        return estado;
    }

    public void modificarDatos(String nuevaMarca, String nuevoModelo) {
        this.marca = nuevaMarca;
        this.modelo = nuevoModelo;
    }

    @Override
    public String toString() {
        return "Bicicleta " + marca + " Modelo " + modelo + " (ID: " + idBicicleta + ")";
    }
}

// Clase Alquiler implementando la interfaz Alquilable (Polimorfismo)
class Alquiler implements Alquilable {
    private int idAlquiler;
    private LocalDateTime fechaInicio;
    private LocalDateTime fechaFin;
    private Cliente cliente;
    private Bicicleta bicicleta;
    private float costoPorHora = 10.0f;

    public Alquiler(int idAlquiler, Cliente cliente, Bicicleta bicicleta) {
        this.idAlquiler = idAlquiler;
        this.fechaInicio = LocalDateTime.now();
        this.cliente = cliente;
        this.bicicleta = bicicleta;
        this.bicicleta.cambiarEstado(EstadoBicicleta.ALQUILADA);
    }

    @Override
    public void iniciarAlquiler() {
        System.out.println("Alquiler iniciado para el cliente: " + cliente);
    }

    @Override
    public void finalizarAlquiler() {
        this.fechaFin = LocalDateTime.now();
        this.bicicleta.cambiarEstado(EstadoBicicleta.DISPONIBLE);
        System.out.println("Alquiler finalizado para el cliente: " + cliente);
    }

    @Override
    public float calcularCosto() {
        if (fechaFin == null) {
            System.out.println("El alquiler aún está en curso.");
            return 0;
        }
        long horasAlquiler = ChronoUnit.HOURS.between(fechaInicio, fechaFin);
        return horasAlquiler * costoPorHora;
    }
}

// Función main para instanciar clases y probar funcionalidad
public class Main {
    public static void main(String[] args) {
        // Crear Cliente
        Cliente cliente1 = new Cliente(1, "Johan", "123456789", "johan@example.com");
        cliente1.registrarCliente();

        // Crear Bicicleta
        Bicicleta bici1 = new Bicicleta(101, "Trek", "FX3");
        System.out.println("Bicicleta creada: " + bici1);

        // Iniciar Alquiler
        Alquiler alquiler1 = new Alquiler(5001, cliente1, bici1);
        alquiler1.iniciarAlquiler();

        // Simular tiempo de alquiler
        try {
            Thread.sleep(2000); // Simular 2 segundos de alquiler
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Finalizar Alquiler y Calcular Costo
        alquiler1.finalizarAlquiler();
        System.out.println("Costo total: $1" + alquiler1.calcularCosto());
    }
}
